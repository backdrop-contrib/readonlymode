<?php

/**
 * @file
 * The Read Only Mode module adds another option to the Site Maintenance page
 * With this option, it is possible to keep the site online but only disable content moderation.
 */

/**
* Implementation of hook_form_alter().
* Permit posting of content
*/
function readonlymode_form_alter(&$form, $form_state, $form_id) {
  if (variable_get('site_readonly', FALSE) && !_readonlymode_form_check($form, $form['form_id']['#value'], FALSE)) {
    global $user;
    if ($user->uid != 1) {
      // Remove element children cleanly.
      foreach(element_children($form) as $key) {
        unset($form[$key]);
      }
      if ($url = variable_get('site_readonly_url', '')) {
        drupal_goto($url);
      }
      else{
        $form['notice'] = array('#markup' => _readonlymode_notice());
      }
    }
    else {
      drupal_set_message(t('The site is currently set to read-only, content moderation is disabled for all users but you.'), 'error');
    }
  }
  $form['#validate'][] = 'readonlymode_check_form_validate';
  return $form;
}

/**
* Implementation of hook_form_FORM_ID_alter().
* Alter the Site Maintenance form
*/
function readonlymode_form_system_site_maintenance_mode_alter(&$form, $form_state) {
    $form['read_only'] = array(
      '#title' => t('Read Only Mode'),
      '#type' => 'fieldset',
      '#weight' => 0,
      '#collapsible' => TRUE,
      '#collapsed' => variable_get('site_readonly', FALSE) ? FALSE : TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="maintenance_mode"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['read_only']['site_readonly'] = array(
      '#type' => 'checkbox',
      '#title' => t('Read only mode'),
      '#description' => t('Put the site in read-only mode. When set to "Read-only", all content moderation (add/edit) will be impossible.'),
      '#weight' => 0,
      '#default_value' => variable_get('site_readonly', FALSE),
    );
    $form['read_only']['site_readonly_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Site read-only message'),
      '#description' => t('The module will replace the forms for posting/editing with the message entered here.'),
      '#default_value' => _readonlymode_notice(),
      '#required' => TRUE,
    );
    $form['read_only']['site_readonly_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Redirect path'),
      '#description' => t('When given, Drupal will redirect the user to this URL when a user tries to add/edit content instead of displaying the message above.'),
      '#default_value' => variable_get('site_readonly_url', ''),
    );
    // Allowed forms configuration is in a collapsed fieldset so that it doesn't clutter the display.
    $form['read_only']['forms'] = array(
      '#title' => t('Allowed forms'),
      '#type' => 'fieldset',
      '#description' => t('Configure which forms will be exempt from restriction when in read-only mode.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['read_only']['forms']['site_readonly_forms_allowed'] = array(
      '#type' => 'textarea',
      '#title' => t('Allowed'),
      '#description' => t("These forms are not restricted when in read only mode. Enter one form id per line. You may use the wildcard character '*' to use loose matches. For example: webform* will match all webforms. Note that the following forms will always be allowed: %allowed_forms.", array(
        '%allowed_forms' => implode(', ',_readonlymode_default_forms_allowed()))),
      '#default_value' => variable_get('site_readonly_forms_allowed', ''),
    );
    $form['read_only']['forms']['site_readonly_forms_viewonly'] = array(
      '#type' => 'textarea',
      '#title' => t('Allowed for view only'),
      '#description' => t("These forms are allowed to be viewed but will not accept form submissions. Enter one form id per line. You may use the wildcard character '*' to use loose matches. For example: webform* will match all webforms. Note that the following forms will always be allowed: %allowed_forms.", array(
        '%allowed_forms' => implode(', ',_readonlymode_default_forms_viewonly()))),
      '#default_value' => variable_get('site_readonly_forms_viewonly', ''),
    );
    $form['#validate'][] = 'readonlymode_form_validate_url';
}

/**
* Implementation of hook_form_validate().
*/
function readonlymode_form_validate_url(&$form, $form_state) {
  if ($path = $form_state['values']['site_readonly_url']) {
    $item = menu_get_item($path);
    if (!$item || !$item['access']) {
      form_set_error('site_readonly_url', t('The path %link_path is either invalid or you do not have access to it.', array('%link_path' => $path)));
    }
  }
}

function _readonlymode_notice() {
  return variable_get('site_readonly_message', t('@sitename is currently in maintenance. During this maintenance it is not possible to add or edit content (like comments and pages).', array('@sitename' => variable_get('site_name', 'drupal'))));
}

/**
 * Internal handler to check whether this form is to be restricted. Returns
 * TRUE if the form is allowed. The caller should also check whether the user
 * is admin (uid=1) and allow accordingly.
 */
function _readonlymode_form_check(&$form, $form_id, $submitted = TRUE) {
  /* By default all forms are restricted. Check for standard system and user
   * specified forms which are 'safe', i.e. they don't cause any data
   * alterations  OR  some forms are allowed if they aren't currently being
   * submitted. i.e. just to display data. For example: The node content list,
   * which is technically a form but doesn't alter data unless the user
   * actually submits it.
   */
  $allowed = preg_split('/(\r\n|\n|\r)/', variable_get('site_readonly_forms_allowed', ''));
  $viewonly = preg_split('/(\r\n|\n|\r)/', variable_get('site_readonly_forms_viewonly', ''));

  $check = TRUE || in_array($form_id, _readonlymode_default_forms_allowed()) || (!$submitted && in_array($form_id, _readonlymode_default_forms_viewonly()));

  foreach ($allowed as $word) {
    // Skip empty words.
    if ($word === '') {
      continue;
    }
    $word = str_replace('*', '.*', $word);
    if (preg_match('/^' . $word . '$/', $form_id) === 1) {
      $check = TRUE;
    }
  }

  if (!$submitted) {
    foreach ($viewonly as $word) {
      // Skip empty words.
      if ($word === ''){
        continue;
      }
      $word = str_replace('*', '.*', $word);
      if (preg_match('/^' . $word . '$/', $form_id) === 1) {
        $check = TRUE;
      }
    }
  }

  return $check;
}

/**
 * Our base forms allowed during read-only mode.
 */
function _readonlymode_default_forms_allowed() {
  return array(
    'user_login',
    'user_login_block',
    'search_form',
    'search_block_form',
    'read_only',
    'system_site_maintenance_mode',
  );
}

/**
 * Our base forms allowed for view during read-only mode.
 */
function _readonlymode_default_forms_viewonly() {
  return array(
    'node_admin_content',
  );
}

/**
 * Our validate handler for checking whether the form submission is occurring while read-only mode is enabled.
 */
function readonlymode_check_form_validate($form, &$form_state) {
  global $user;

  // Skip further checks for user 1.
  if ($user->uid == 1) {
    return TRUE;
  }

  // Check for read-only mode, whether we are allowed this form,
  if (variable_get('site_readonly', FALSE) && !_readonlymode_form_check($form, $form['form_id']['#value'], TRUE)) {
    form_set_error('', _readonlymode_notice());
  }
}
